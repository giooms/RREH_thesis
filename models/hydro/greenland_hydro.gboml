#TIMEHORIZON
    // time horizon definition
    T = 8760;

#GLOBAL
    // global parameters

    demand_el = import "..\..\data\demand_el.csv";  // GWh(e) - tertiary, industry, residential and railway electricity demand + electricity heating
    //wacc = 0.0441;
    //hydro_wacc = 0.0421;
    number_years_horizon = T/8760; 
    co2_emission_cost = 0; // 80 * 1/(10**3); // M€/kt(co2)
    e_ens_cost = 3; // M€/GWh
    yearly_grid_cost = 0.0; // FOR PV Templates /!\ should find the real value of this
    // GWh(e) - tertiary, industry, residential and railway electricity demand
    cap_co2 = 0.0; // kt C02


// Belgium Infrasctructure definition
// We base ourselves on the infrastrcuture available in 2030

#NODE LIQUEFIED_METHANE_REGASIFICATION = import LIQUEFIED_METHANE_REGASIFICATION from "..\..\templates\remote_hub_wacc.gboml";
#NODE LIQUEFIED_METHANE_STORAGE_DESTINATION = import LIQUEFIED_METHANE_STORAGE_DESTINATION from "..\..\templates\remote_hub_wacc.gboml";

#NODE ENERGY_DEMAND_BE	
	#VARIABLES
	    external: e_ens[T]; // GWh
    #CONSTRAINTS
        // dual_constraint: e_ens[t] >= 0.0; 
        e_ens[t] >=0;
        // dual_constraint: sum(e_ens[i] for i in [0:T-1]) == 0.0; 
        dual_constraint: e_ens[t] == 0.0; 
    #OBJECTIVES
        min: e_ens[t] * global.e_ens_cost; // M€

// Methane Balance Belgium gas
#HYPEREDGE DESTINATION_METHANE_BALANCE
	#PARAMETERS
        demand = import "..\..\data\demand_ng.csv"; // /!\ Gas Demand Constant // GWh (ch4)
        conversion_factor = 15.31; // GWh/kt of liquefied gas
	#CONSTRAINTS
	    LIQUEFIED_METHANE_REGASIFICATION.methane[t] == demand[t];

// Methane Balance Belgium Liquid
#HYPEREDGE DESTINATION_LIQUEFIED_METHANE_BALANCE
	#CONSTRAINTS
	    LIQUEFIED_METHANE_CARRIERS_RREH.liquefied_methane_out[t] + LIQUEFIED_METHANE_STORAGE_DESTINATION.liquefied_methane_out[t] == LIQUEFIED_METHANE_STORAGE_DESTINATION.liquefied_methane_in[t] + LIQUEFIED_METHANE_REGASIFICATION.liquefied_methane[t];

// REMOTE HUB GROENLAND

#NODE HYDRO_BASIN_03h_RREH
    #PARAMETERS
        // initial_storage = 35.0 * 1e3; // thousands of cubic meters (TCM), yearly average (GEUS report)
        inflow_series = import "../../data/inflow_series_03h.csv"; // TCM/h, historical inflow data
        // evaporation_rate = 0.0001; // m per day, specific to basin location
        area = 25; // km² Report 2005
        max_storage = 22.5 * 1e3; // TCM
        min_storage = 5.0 * 1e3; // TCM, operational minimum
    #VARIABLES
        internal: storage[T];
        external: release[T]; 
        external: spill[T];
    #CONSTRAINTS
        storage[0] == storage[T-1];
        storage[t] <= max_storage;
        storage[t] >= min_storage;
        release[t] + spill[t] <= 10 * inflow_series[t] + storage[t-1] - storage[t]; // doesn't work with evaporation rate.. 
        release[t] >= 0;
        spill[t] >= 0;
    // #OBJECTIVES
        // min: 0; // Minimize spillage /!\ Ce n'est pas un coût 

#HYPEREDGE BASIN_TO_HYDRO_03h
    #CONSTRAINTS
    water_balance: HYDRO_BASIN_03h_RREH.release[t] == HYDRO_PLANT_03h_RREH.release[t];

#NODE HYDRO_PLANT_03h_RREH
    #PARAMETERS // for >= 50MW
        full_capex = 1713; // in MEur/GW --> source = IRENA 2000-2021
        lifetime = 100.0;
        annualised_capex = full_capex * global.hydro_wacc * (1 + global.hydro_wacc)**lifetime / ((1 + global.hydro_wacc)**lifetime - 1); // MEur
        fom = 40; // MEur/year
        vom = 0.003; // MEur/GWh
        efficiency = 0.87;
        max_capacity = 4; // GW, hydropower resource 2005 * 100
    #VARIABLES
        internal: capacity;
        external: electricity[T];
        external: release[T]; // Release is water released to turbine
    #CONSTRAINTS
        electricity[t] == efficiency * release[t];
        electricity[t] <= capacity;
        capacity <= max_capacity;
        capacity >= 0;
        electricity[t] >= 0;
    #OBJECTIVES
        min: global.number_years_horizon * (annualised_capex + fom) * capacity;
        min: vom * electricity[t];


#NODE HYDRO_BASIN_03j_RREH
    #PARAMETERS
        // initial_storage = 35.0 * 1e3; // TCM, yearly average (GEUS report)
        inflow_series = import "../../data/inflow_series_03j.csv"; // TCM/h, historical inflow data
        // evaporation_rate = 0.0001; // m per day, specific to basin location
        area = 25; // km² Report 2005
        max_storage = 58.5 * 1e3; // TCM
        min_storage = 5.0 * 1e3; // TCM, operational minimum
    #VARIABLES
        internal: storage[T];
        external: release[T]; 
        external: spill[T];
    #CONSTRAINTS
        storage[0] == storage[T-1];
        //storage[t+1] == storage[t] + inflow_series[t+1] - release[t+1] - spill[t+1] - (evaporation_rate * area * 1e6 / 24);
        storage[t] <= max_storage;
        storage[t] >= min_storage;
        release[t] + spill[t] <= 10 * inflow_series[t] + storage[t-1] - storage[t]; // doesn't work with evaporation rate.. 
        // release[t] <= 4.95 / 0.87;
        release[t] >= 0;
        spill[t] >= 0;
    // #OBJECTIVES
        // min: 0; // Minimize spillage /!\ Ce n'est pas un coût 

#HYPEREDGE BASIN_TO_HYDRO_03j
    #CONSTRAINTS
        water_balance: HYDRO_BASIN_03j_RREH.release[t] == HYDRO_PLANT_03j_RREH.release[t];

#NODE HYDRO_PLANT_03j_RREH
    #PARAMETERS // for >= 50MW
        full_capex = 1713; // in MEur/GW --> source = IRENA 2000-2021
        lifetime = 100.0;
        annualised_capex = full_capex * global.hydro_wacc * (1 + global.hydro_wacc)**lifetime / ((1 + global.hydro_wacc)**lifetime - 1); // MEur
        fom = 40; // MEur/year
        vom = 0.003; // MEur/GWh
        efficiency = 0.87;
        max_capacity = 9.9; // GW, hydropower resource 2005 * 100
    #VARIABLES
        internal: capacity;
        external: electricity[T];
        external: release[T]; // Release is water released to turbine
    #CONSTRAINTS
        electricity[t] == efficiency * release[t];
        electricity[t] <= capacity;
        capacity <= max_capacity;
        capacity >= 0;
        electricity[t] >= 0;
    #OBJECTIVES
        min: global.number_years_horizon * (annualised_capex + fom) * capacity;
        min: vom * electricity[t];


#NODE HYDRO_BASIN_05h_RREH
    #PARAMETERS
        // initial_storage = 35.0 * 1e3; // TCM * 1e6 = m³, yearly average (GEUS report)
        inflow_series = import "../../data/inflow_series_05h.csv"; // TCM/h, historical inflow data
        // evaporation_rate = 0.0001; // m per day, specific to basin location
        area = 25; // km² Report 2005
        max_storage = 35.0 * 1e3; // TCM
        min_storage = 5.0 * 1e3; // TCM, operational minimum
    #VARIABLES
        internal: storage[T];
        external: release[T]; 
        external: spill[T];
    #CONSTRAINTS
        storage[0] == storage[T-1];
        //storage[t+1] == storage[t] + inflow_series[t+1] - release[t+1] - spill[t+1] - (evaporation_rate * area * 1e6 / 24);
        storage[t] <= max_storage;
        storage[t] >= min_storage;
        release[t] + spill[t] <= 10 * inflow_series[t] + storage[t-1] - storage[t]; // doesn't work with evaporation rate.. 
        release[t] >= 0;
        spill[t] >= 0;
    // #OBJECTIVES
        // min: 0; // Minimize spillage /!\ Ce n'est pas un coût 

#HYPEREDGE BASIN_TO_HYDRO_05h
    #CONSTRAINTS
        water_balance: HYDRO_BASIN_05h_RREH.release[t] == HYDRO_PLANT_05h_RREH.release[t];

#NODE HYDRO_PLANT_05h_RREH
    #PARAMETERS // for >= 50MW
        full_capex = 1713; // in MEur/GW --> source = IRENA 2000-2021
        lifetime = 100.0;
        annualised_capex = full_capex * global.hydro_wacc * (1 + global.hydro_wacc)**lifetime / ((1 + global.hydro_wacc)**lifetime - 1); // MEur
        fom = 40; // MEur/year
        vom = 0.003; // MEur/GWh
        efficiency = 0.87;
        max_capacity = 5.8; // GW, hydropower resource 2005 * 100
    #VARIABLES
        internal: capacity;
        external: electricity[T];
        external: release[T]; // Release is water released to turbine
    #CONSTRAINTS
        electricity[t] == efficiency * release[t];
        electricity[t] <= capacity;
        capacity <= max_capacity;
        capacity >= 0;
        electricity[t] >= 0;
    #OBJECTIVES
        min: global.number_years_horizon * (annualised_capex + fom) * capacity;
        min: vom * electricity[t];
        
#NODE BATTERY_STORAGE_RREH = import BATTERY_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE HVDC_RREH = import HVDC from "..\..\templates\remote_hub_wacc.gboml" with full_capex_lines = 0.25*300;
#NODE ELECTROLYSIS_PLANTS_RREH = import ELECTROLYSIS_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE DESALINATION_PLANTS_RREH = import DESALINATION_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE DIRECT_AIR_CAPTURE_PLANTS_RREH = import DIRECT_AIR_CAPTURE_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE HYDROGEN_STORAGE_RREH = import HYDROGEN_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE CARBON_DIOXIDE_STORAGE_RREH = import CARBON_DIOXIDE_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE WATER_STORAGE_RREH = import WATER_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE METHANATION_PLANTS_RREH = import METHANATION_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE METHANE_LIQUEFACTION_PLANTS_RREH = import METHANE_LIQUEFACTION_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE LIQUEFIED_METHANE_STORAGE_HUB_RREH = import LIQUEFIED_METHANE_STORAGE_HUB from "..\..\templates\remote_hub_wacc.gboml";
#NODE LIQUEFIED_METHANE_CARRIERS_RREH = import LIQUEFIED_METHANE_CARRIERS from "..\..\templates\remote_hub_wacc.gboml";
#HYPEREDGE INLAND_POWER_BALANCE_RREH
    #CONSTRAINTS
        inland_power_balance_gr: HYDRO_PLANT_03j_RREH.electricity[t] + HYDRO_PLANT_05h_RREH.electricity[t] + BATTERY_STORAGE_RREH.electricity_out[t] == BATTERY_STORAGE_RREH.electricity_in[t] + HVDC_RREH.electricity_in[t];

#HYPEREDGE COASTAL_POWER_BALANCE_RREH
    #CONSTRAINTS
        HVDC_RREH.electricity_out[t] == ELECTROLYSIS_PLANTS_RREH.electricity[t] + HYDROGEN_STORAGE_RREH.electricity[t] + DESALINATION_PLANTS_RREH.electricity[t] + WATER_STORAGE_RREH.electricity[t] + DIRECT_AIR_CAPTURE_PLANTS_RREH.electricity[t] + CARBON_DIOXIDE_STORAGE_RREH.electricity[t] + METHANE_LIQUEFACTION_PLANTS_RREH.electricity[t];

#HYPEREDGE COASTAL_HYDROGEN_BALANCE_RREH
    #CONSTRAINTS
        ELECTROLYSIS_PLANTS_RREH.hydrogen[t] + HYDROGEN_STORAGE_RREH.hydrogen_out[t] == HYDROGEN_STORAGE_RREH.hydrogen_in[t] + DIRECT_AIR_CAPTURE_PLANTS_RREH.hydrogen[t] + METHANATION_PLANTS_RREH.hydrogen[t];

#HYPEREDGE COASTAL_WATER_BALANCE_RREH
    #CONSTRAINTS
        DESALINATION_PLANTS_RREH.water[t] + METHANATION_PLANTS_RREH.water[t] + WATER_STORAGE_RREH.water_out[t] == WATER_STORAGE_RREH.water_in[t] + ELECTROLYSIS_PLANTS_RREH.water[t] + DIRECT_AIR_CAPTURE_PLANTS_RREH.water[t];


#HYPEREDGE COASTAL_METHANE_BALANCE_RREH
    #CONSTRAINTS
        METHANATION_PLANTS_RREH.methane[t] == METHANE_LIQUEFACTION_PLANTS_RREH.methane[t];


#HYPEREDGE COASTAL_LIQUEFIED_METHANE_BALANCE_RREH
    #CONSTRAINTS
        liquefied_methane_balance: METHANE_LIQUEFACTION_PLANTS_RREH.liquefied_methane[t] + LIQUEFIED_METHANE_STORAGE_HUB_RREH.liquefied_methane_out[t] == LIQUEFIED_METHANE_STORAGE_HUB_RREH.liquefied_methane_in[t] + LIQUEFIED_METHANE_CARRIERS_RREH.liquefied_methane_in[t]; // GWh;

#HYPEREDGE COASTAL_CARBON_DIOXIDE_BALANCE_RREH
    #CONSTRAINTS
        only_carrier: DIRECT_AIR_CAPTURE_PLANTS_RREH.carbon_dioxide[t] + CARBON_DIOXIDE_STORAGE_RREH.carbon_dioxide_out[t] == CARBON_DIOXIDE_STORAGE_RREH.carbon_dioxide_in[t] + METHANATION_PLANTS_RREH.carbon_dioxide[t];
