#TIMEHORIZON
    T=8760;

#GLOBAL
    //wacc = 0.07;
    //solar_wacc = 0.036;
    //wind_wacc = 0.031;
    number_years_horizon = T/8760;
    co2_emission_cost = 0;

#NODE SOLAR_PV_PLANTS_RREH
    #PARAMETERS
        full_capex = 380.0;
        lifetime = 25.0;
        annualised_capex = full_capex * global.solar_wacc * (1 + global.solar_wacc)**lifetime / ((1 + global.solar_wacc)**lifetime - 1); // MEur
        fom = 9.5; // MEur/year
        vom = 0.0;
        capacity_factor_PV = import "..\..\data\pv_capacity_factors_ES.csv"; // Dimensionless
        max_capacity = 500.0; // GW
    #VARIABLES
        internal: capacity;
        external: electricity[T];
    #CONSTRAINTS
        electricity[t] <= capacity_factor_PV[t] * capacity;
        capacity <= max_capacity;
        capacity >= 0;
        electricity[t] >= 0;
    #OBJECTIVES
        min: global.number_years_horizon * (annualised_capex + fom) * capacity;
        min: vom * electricity[t];

#NODE ON_WIND_PLANTS_RREH
    #PARAMETERS
        full_capex = 1110.0;
        lifetime = 30.0;
        annualised_capex = full_capex * global.onshore_wacc * (1 + global.onshore_wacc)**lifetime / ((1 + global.onshore_wacc)**lifetime - 1); // MEur
        fom = 13.4; // MEur/year
        vom = 0.00144; // MEur/GWh
        capacity_factor_wind = import "..\..\data\wind_capacity_factors_ES.csv"; // Dimensionless
        max_capacity = 500.0; // GW
    #VARIABLES
        internal: capacity;
        external: electricity[T];
    #CONSTRAINTS
        electricity[t] <= capacity_factor_wind[t] * capacity;
        capacity <= max_capacity;
        capacity >= 0;
        electricity[t] >= 0;
    #OBJECTIVES
    min: global.number_years_horizon * (annualised_capex + fom) * capacity;
    min: vom * electricity[t];

#NODE BATTERY_STORAGE_RREH = import BATTERY_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE HVDC_RREH = import HVDC from "..\..\templates\remote_hub_wacc.gboml";
#NODE ELECTROLYSIS_PLANTS_RREH = import ELECTROLYSIS_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE DESALINATION_PLANTS_RREH = import DESALINATION_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE DIRECT_AIR_CAPTURE_PLANTS_RREH = import DIRECT_AIR_CAPTURE_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE HYDROGEN_STORAGE_RREH = import HYDROGEN_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE CARBON_DIOXIDE_STORAGE_RREH = import CARBON_DIOXIDE_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE WATER_STORAGE_RREH = import WATER_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE METHANATION_PLANTS_RREH = import METHANATION_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE METHANE_LIQUEFACTION_PLANTS_RREH = import METHANE_LIQUEFACTION_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE LIQUEFIED_METHANE_STORAGE_HUB_RREH = import LIQUEFIED_METHANE_STORAGE_HUB from "..\..\templates\remote_hub_wacc.gboml";

#NODE LIQUEFIED_METHANE_CARRIERS_RREH
#PARAMETERS
number_carriers = 7;
full_capex = 2.537;
lifetime = 30.0;
annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
fom = 0.12685; // MEur/year
vom = 0.0;
schedule = import "..\..\data\carrier_schedule.csv";
loading_time = 24;
travel_time = 39.22; // 550km from Santander to Antwerp
loss_rate = 0.00005208;
conversion_factor = 1 - (loss_rate * travel_time);
#VARIABLES
internal: capacity;
external: liquefied_methane_in[T];
external: liquefied_methane_out[T];
#CONSTRAINTS
liquefied_methane_in[t] <= schedule[t] * capacity;
liquefied_methane_out[t+travel_time] == conversion_factor * liquefied_methane_in[t];
liquefied_methane_out[t] == 0 where t < travel_time;
capacity >= 0;
liquefied_methane_in[t] >= 0;
liquefied_methane_out[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity * loading_time * number_carriers;
min: vom * liquefied_methane_in[t];

#NODE LIQUEFIED_METHANE_STORAGE_DESTINATION
#PARAMETERS
full_capex_stock = 2.641;
full_capex_flow = 0.001;
lifetime_stock = 30.0;
lifetime_flow = 30.0;
annualised_capex_stock = full_capex_stock * global.wacc_be * (1 + global.wacc_be)**lifetime_stock / ((1 + global.wacc_be)**lifetime_stock - 1); // MEur
annualised_capex_flow = full_capex_flow * global.wacc_be * (1 + global.wacc_be)**lifetime_flow / ((1 + global.wacc_be)**lifetime_flow - 1); // MEur
fom_stock = 0.05282;
fom_flow = 0.0;
vom_stock = 0.0;
vom_flow = 0.0;
#VARIABLES
internal: capacity_flow;
internal: capacity_stock;
internal: liquefied_methane_stored[T];
external: liquefied_methane_in[T];
external: liquefied_methane_out[T];
#CONSTRAINTS
liquefied_methane_in[t] <= capacity_flow;
liquefied_methane_out[t] <= capacity_flow;
liquefied_methane_stored[t] <= capacity_stock;
liquefied_methane_stored[0] == liquefied_methane_stored[T-1];
liquefied_methane_stored[t+1] == liquefied_methane_stored[t] + liquefied_methane_in[t] - liquefied_methane_out[t];
capacity_flow >= 0;
capacity_stock >= 0;
liquefied_methane_stored[t] >= 0;
liquefied_methane_in[t] >= 0;
liquefied_methane_out[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex_stock + fom_stock) * capacity_stock + global.number_years_horizon * (annualised_capex_flow + fom_flow) * capacity_flow;
min: vom_stock * liquefied_methane_stored[t] + vom_flow * liquefied_methane_in[t];

#NODE LIQUEFIED_METHANE_REGASIFICATION
#PARAMETERS
full_capex = 1248.3;
lifetime = 30.0;
annualised_capex = full_capex * global.wacc_be * (1 + global.wacc_be)**lifetime / ((1 + global.wacc_be)**lifetime - 1); // MEur
fom = 24.97; // MEur/year
vom = 0.0;
conversion_factor = 0.98;
#VARIABLES
internal: capacity;
external: liquefied_methane[T];
external: methane[T];
#CONSTRAINTS
liquefied_methane[t] <= capacity;
methane[t] == conversion_factor * liquefied_methane[t];
capacity >= 0;
methane[t] >= 0;
liquefied_methane[t] >= 0;
#OBJECTIVES
min: global.number_years_horizon * (annualised_capex + fom) * capacity;
min: vom * liquefied_methane[t];

#HYPEREDGE INLAND_POWER_BALANCE
#CONSTRAINTS
SOLAR_PV_PLANTS_RREH.electricity[t] + ON_WIND_PLANTS_RREH.electricity[t] + BATTERY_STORAGE_RREH.electricity_out[t] == BATTERY_STORAGE_RREH.electricity_in[t] + HVDC_RREH.electricity_in[t];

#HYPEREDGE COASTAL_POWER_BALANCE
#CONSTRAINTS
HVDC_RREH.electricity_out[t] == ELECTROLYSIS_PLANTS_RREH.electricity[t] + HYDROGEN_STORAGE_RREH.electricity[t] + DESALINATION_PLANTS_RREH.electricity[t] + WATER_STORAGE_RREH.electricity[t] + DIRECT_AIR_CAPTURE_PLANTS_RREH.electricity[t] + CARBON_DIOXIDE_STORAGE_RREH.electricity[t] + METHANE_LIQUEFACTION_PLANTS_RREH.electricity[t];

#HYPEREDGE COASTAL_HYDROGEN_BALANCE
#CONSTRAINTS
ELECTROLYSIS_PLANTS_RREH.hydrogen[t] + HYDROGEN_STORAGE_RREH.hydrogen_out[t] == HYDROGEN_STORAGE_RREH.hydrogen_in[t] + DIRECT_AIR_CAPTURE_PLANTS_RREH.hydrogen[t] + METHANATION_PLANTS_RREH.hydrogen[t];

#HYPEREDGE COASTAL_WATER_BALANCE
#CONSTRAINTS
DESALINATION_PLANTS_RREH.water[t] + METHANATION_PLANTS_RREH.water[t] + WATER_STORAGE_RREH.water_out[t] == WATER_STORAGE_RREH.water_in[t] + ELECTROLYSIS_PLANTS_RREH.water[t] + DIRECT_AIR_CAPTURE_PLANTS_RREH.water[t];

#HYPEREDGE COASTAL_CARBON_DIOXIDE_BALANCE
#CONSTRAINTS
DIRECT_AIR_CAPTURE_PLANTS_RREH.carbon_dioxide[t] + CARBON_DIOXIDE_STORAGE_RREH.carbon_dioxide_out[t] == CARBON_DIOXIDE_STORAGE_RREH.carbon_dioxide_in[t] + METHANATION_PLANTS_RREH.carbon_dioxide[t];

#HYPEREDGE COASTAL_METHANE_BALANCE
#CONSTRAINTS
METHANATION_PLANTS_RREH.methane[t] == METHANE_LIQUEFACTION_PLANTS_RREH.methane[t];

#HYPEREDGE COASTAL_LIQUEFIED_METHANE_BALANCE
#CONSTRAINTS
METHANE_LIQUEFACTION_PLANTS_RREH.liquefied_methane[t] + LIQUEFIED_METHANE_STORAGE_HUB_RREH.liquefied_methane_out[t] == LIQUEFIED_METHANE_STORAGE_HUB_RREH.liquefied_methane_in[t] + LIQUEFIED_METHANE_CARRIERS_RREH.liquefied_methane_in[t];

#HYPEREDGE DESTINATION_LIQUEFIED_METHANE_BALANCE
#CONSTRAINTS
LIQUEFIED_METHANE_CARRIERS_RREH.liquefied_methane_out[t] + LIQUEFIED_METHANE_STORAGE_DESTINATION.liquefied_methane_out[t] == LIQUEFIED_METHANE_STORAGE_DESTINATION.liquefied_methane_in[t] + LIQUEFIED_METHANE_REGASIFICATION.liquefied_methane[t];

#HYPEREDGE DESTINATION_METHANE_BALANCE
	#PARAMETERS
        demand = import "..\..\data\demand_ng.csv"; // /!\ Gas Demand Constant // GWh (ch4)
        conversion_factor = 15.31; // GWh/kt of liquefied gas
	#CONSTRAINTS
	    LIQUEFIED_METHANE_REGASIFICATION.methane[t] == demand[t];
