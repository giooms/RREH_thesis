#TIMEHORIZON
// time horizon definition
T = 8760;

#GLOBAL
// global parameters

demand_el = import "..\..\data\demand_el.csv";  // GWh(e) - tertiary, industry, residential and railway electricity demand + electricity heating
wacc = 0.07;
number_years_horizon = T/8760; 
co2_emission_cost = 0; // 80 * 1/(10**3); // M€/kt(co2)
e_ens_cost = 3; // M€/GWh
yearly_grid_cost = 0.0; // FOR PV Templates /!\ should find the real value of this
// GWh(e) - tertiary, industry, residential and railway electricity demand
cap_co2 = 0.0; // kt C02


// Belgium Infrasctructure definition
// We base ourselves on the infrastrcuture available in 2030

#NODE LIQUEFIED_METHANE_REGASIFICATION = import LIQUEFIED_METHANE_REGASIFICATION from "..\..\templates\remote_hub_wacc.gboml";
#NODE LIQUEFIED_METHANE_STORAGE_DESTINATION = import LIQUEFIED_METHANE_STORAGE_DESTINATION from "..\..\templates\remote_hub_wacc.gboml";

#NODE ENERGY_DEMAND_BE	
	#VARIABLES
	external: e_ens[T]; // GWh
    #CONSTRAINTS
    // dual_constraint: e_ens[t] >= 0.0; 
    e_ens[t] >=0;
    // dual_constraint: sum(e_ens[i] for i in [0:T-1]) == 0.0; 
    dual_constraint: e_ens[t] == 0.0; 
    
    #OBJECTIVES
    min: e_ens[t] * global.e_ens_cost; // M€

// Methane Balance Belgium gas
#HYPEREDGE DESTINATION_METHANE_BALANCE
	#PARAMETERS
	demand = import "..\..\data\demand_ng.csv"; // /!\ Gas Demand Constant // GWh (ch4)
    conversion_factor = 15.31; // GWh/kt of liquefied gas
	#CONSTRAINTS
	conversion_factor * LIQUEFIED_METHANE_REGASIFICATION.methane[t] == demand[t];

// Methane Balance Belgium Liquid
#HYPEREDGE DESTINATION_LIQUEFIED_METHANE_BALANCE
	#CONSTRAINTS
	LIQUEFIED_METHANE_CARRIERS_GR.liquefied_methane_out[t] + LIQUEFIED_METHANE_STORAGE_DESTINATION.liquefied_methane_out[t] == LIQUEFIED_METHANE_STORAGE_DESTINATION.liquefied_methane_in[t] + LIQUEFIED_METHANE_REGASIFICATION.liquefied_methane[t];

// REMOTE HUB GROENLAND

#NODE OFF_WIND_PLANTS_GR
    #PARAMETERS
    full_capex = 1800; // MEur/GW --> source = Denmark 2030
    lifetime = 30.0;
    annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
    fom = 39; // MEur/year --> source = Denmark 2030
    vom = 0.00389; // MEur/GWh --> source = Denmark 2030
    capacity_factor_off_wind = import "..\..\data\load_factor_woff_GL.csv"; // Dimensionless
    max_capacity = 1000.0; // GW
    #VARIABLES
    internal: capacity;
    external: electricity[T];
    #CONSTRAINTS
    electricity[t] <= capacity_factor_off_wind[t] * capacity;
    capacity <= max_capacity;
    capacity >= 0;
    electricity[t] >= 0;
    #OBJECTIVES
    min: global.number_years_horizon * (annualised_capex + fom) * capacity;
    min: vom * electricity[t];

#NODE ON_WIND_PLANTS_GR
    #PARAMETERS
    full_capex = 1110; // in MEur/GW --> source = Denmark 2030
    lifetime = 30.0;
    annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
    fom = 13.4; // MEur/year --> source = Denmark 2030
    vom = 0.00144; // MEur/GWh --> source = Denmark 2030
    capacity_factor_wind = import "../../data/load_factor_won_GL.csv"; // Dimensionless
    max_capacity = 1000.0; // GW
    #VARIABLES
    internal: capacity;
    external: electricity[T];
    #CONSTRAINTS
    electricity[t] <= capacity_factor_wind[t] * capacity;
    capacity <= max_capacity;
    capacity >= 0;
    electricity[t] >= 0;
    #OBJECTIVES
    min: global.number_years_horizon * (annualised_capex + fom) * capacity;
    min: vom * electricity[t];

#NODE HYDRO_BASIN_GR
    #PARAMETERS
    initial_storage = 50.0 * 1e6; // MCM * 1e6 = m³, example initial storage
    inflow_series = import "../../data/inflow_series.csv"; // m^3/h, historical inflow data
    evaporation_rate = 0.0001; // m per day, specific to basin location
    area = 25; // km²
    max_storage = 100.0 * 1e6; // Million cubic meters (MCM)
    min_storage = 10.0 * 1e6; // MCM, operational minimum
    #VARIABLES
    internal: storage[T];
    external: release[T]; 
    external: spill[T];
    #CONSTRAINTS
    storage[0] == initial_storage + inflow_series[0]; // Set initial storage level
    storage[t] == storage[t-1] + inflow_series[t] - release[t] - spill[t] - evaporation_rate * area; // Adjust for evaporation over area and days
    storage[t] <= max_storage;
    storage[t] >= min_storage;
    release[t] + spill[t] <= inflow_series[t] + storage[t-1] - storage[t];
    release[t] >= 0;
    spill[t] >= 0;
    #OBJECTIVES
    min: spill[t]; // Minimize spillage

#HYPEREDGE BASIN_TO_HYDRO
    #CONSTRAINTS
    water_balance: HYDRO_BASIN_GR.release[t] == HYDRO_PLANT_GR.release[t];

#NODE HYDRO_PLANT_GR
    #PARAMETERS //for >50MW
    full_capex = 1713; // in MEur/GW --> source = IRENA 2000-2021
    lifetime = 100.0;
    annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
    fom = 40; // MEur/year
    vom = 0.003; // MEur/GWh
    efficiency = 0.9;
    // max_capacity = 300.0; // GW, example maximum capacity
    capacity = 5.0;
    #VARIABLES
    // internal: capacity;
    external: electricity[T];
    external: release[T]; // Release is water released to turbine
    #CONSTRAINTS
    electricity[t] <= efficiency * release[t] * capacity; // NON LINEAR BECAUSE OF TWO VARIABLES
    // capacity <= max_capacity;
    // capacity >= 0;
    electricity[t] >= 0;
    #OBJECTIVES
    min: global.number_years_horizon * (annualised_capex + fom) * capacity;
    min: vom * electricity[t];
    
#NODE BATTERY_STORAGE_GR = import BATTERY_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE HVDC_GR = import HVDC from "..\..\templates\remote_hub_wacc.gboml" with full_capex_lines = 0.25*100;
#NODE ELECTROLYSIS_PLANTS_GR = import ELECTROLYSIS_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE DESALINATION_PLANTS_GR = import DESALINATION_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE DIRECT_AIR_CAPTURE_PLANTS_GR = import DIRECT_AIR_CAPTURE_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE HYDROGEN_STORAGE_GR = import HYDROGEN_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE CARBON_DIOXIDE_STORAGE_GR = import CARBON_DIOXIDE_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE WATER_STORAGE_GR = import WATER_STORAGE from "..\..\templates\remote_hub_wacc.gboml";
#NODE METHANATION_PLANTS_GR = import METHANATION_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE METHANE_LIQUEFACTION_PLANTS_GR = import METHANE_LIQUEFACTION_PLANTS from "..\..\templates\remote_hub_wacc.gboml";
#NODE LIQUEFIED_METHANE_STORAGE_HUB_GR = import LIQUEFIED_METHANE_STORAGE_HUB from "..\..\templates\remote_hub_wacc.gboml";
#NODE LIQUEFIED_METHANE_CARRIERS_GR = import LIQUEFIED_METHANE_CARRIERS from "..\..\templates\remote_hub_wacc.gboml";
#HYPEREDGE INLAND_POWER_BALANCE_GR
    #CONSTRAINTS
    inland_power_balance_gr: OFF_WIND_PLANTS_GR.electricity[t] + ON_WIND_PLANTS_GR.electricity[t] + HYDRO_PLANT_GR.electricity[t] + BATTERY_STORAGE_GR.electricity_out[t] == BATTERY_STORAGE_GR.electricity_in[t] + HVDC_GR.electricity_in[t];

#HYPEREDGE COASTAL_POWER_BALANCE_GR
#CONSTRAINTS
HVDC_GR.electricity_out[t] == ELECTROLYSIS_PLANTS_GR.electricity[t] + HYDROGEN_STORAGE_GR.electricity[t] + DESALINATION_PLANTS_GR.electricity[t] + WATER_STORAGE_GR.electricity[t] + DIRECT_AIR_CAPTURE_PLANTS_GR.electricity[t] + CARBON_DIOXIDE_STORAGE_GR.electricity[t] + METHANE_LIQUEFACTION_PLANTS_GR.electricity[t];

#HYPEREDGE COASTAL_HYDROGEN_BALANCE_GR
#CONSTRAINTS
ELECTROLYSIS_PLANTS_GR.hydrogen[t] + HYDROGEN_STORAGE_GR.hydrogen_out[t] == HYDROGEN_STORAGE_GR.hydrogen_in[t] + DIRECT_AIR_CAPTURE_PLANTS_GR.hydrogen[t] + METHANATION_PLANTS_GR.hydrogen[t];

#HYPEREDGE COASTAL_WATER_BALANCE_GR
#CONSTRAINTS
DESALINATION_PLANTS_GR.water[t] + METHANATION_PLANTS_GR.water[t] + WATER_STORAGE_GR.water_out[t] == WATER_STORAGE_GR.water_in[t] + ELECTROLYSIS_PLANTS_GR.water[t] + DIRECT_AIR_CAPTURE_PLANTS_GR.water[t];


#HYPEREDGE COASTAL_METHANE_BALANCE_GR
    #CONSTRAINTS
    METHANATION_PLANTS_GR.methane[t] == METHANE_LIQUEFACTION_PLANTS_GR.methane[t];


#HYPEREDGE COASTAL_LIQUEFIED_METHANE_BALANCE_GR
    #CONSTRAINTS
        liquefied_methane_balance: METHANE_LIQUEFACTION_PLANTS_GR.liquefied_methane[t] + LIQUEFIED_METHANE_STORAGE_HUB_GR.liquefied_methane_out[t] == LIQUEFIED_METHANE_STORAGE_HUB_GR.liquefied_methane_in[t] + LIQUEFIED_METHANE_CARRIERS_GR.liquefied_methane_in[t]; // GWh;

#HYPEREDGE COASTAL_CARBON_DIOXIDE_BALANCE_GR
    #CONSTRAINTS
        only_carrier: DIRECT_AIR_CAPTURE_PLANTS_GR.carbon_dioxide[t] + CARBON_DIOXIDE_STORAGE_GR.carbon_dioxide_out[t] == CARBON_DIOXIDE_STORAGE_GR.carbon_dioxide_in[t] + METHANATION_PLANTS_GR.carbon_dioxide[t];
