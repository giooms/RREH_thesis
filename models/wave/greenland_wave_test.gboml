#TIMEHORIZON
    // time horizon definition
    T = 8760;

#GLOBAL
    // global parameters

    demand_el = import "..\..\data\demand_el.csv";  // GWh(e) - tertiary, industry, residential and railway electricity demand + electricity heating
    wacc = 0.07;
    number_years_horizon = T/8760; 
    co2_emission_cost = 0; // 80 * 1/(10**3); // M€/kt(co2)
    e_ens_cost = 3; // M€/GWh
    yearly_grid_cost = 0.0; // FOR PV Templates /!\ should find the real value of this
    // GWh(e) - tertiary, industry, residential and railway electricity demand
    cap_co2 = 0.0; // kt C02


// Belgium Infrasctructure definition
// We base ourselves on the infrastrcuture available in 2030

#NODE ENERGY_DEMAND_BE	
	#VARIABLES
	    external: e_ens[T]; // GWh
    #CONSTRAINTS
        // dual_constraint: e_ens[t] >= 0.0; 
        e_ens[t] >=0;
        // dual_constraint: sum(e_ens[i] for i in [0:T-1]) == 0.0; 
        dual_constraint: e_ens[t] == 0.0; 
    #OBJECTIVES
        min: e_ens[t] * global.e_ens_cost; // M€

// Methane Balance Belgium gas
#HYPEREDGE DESTINATION_METHANE_BALANCE
	#PARAMETERS
        demand = import "..\..\data\demand_ng.csv"; // /!\ Gas Demand Constant // GWh (ch4)
        conversion_factor = 15.31; // GWh/kt of liquefied gas
	#CONSTRAINTS
	    WAVE_PLANT_GR.electricity[t] >= demand[t];

// REMOTE HUB GROENLAND

#NODE WAVE_PLANT_GR
    #PARAMETERS
        full_capex = 1701.0; // MEur/GW --> source = Denmark 2050
        lifetime = 30.0;
        annualised_capex = full_capex * global.wacc * (1 + global.wacc)**lifetime / ((1 + global.wacc)**lifetime - 1); // MEur
        fom = 0; // MEur/year --> source = Denmark 2050
        vom = 0.00744; // MEur/GWh --> source = Denmark 2050
        wave_energy_density = import "..\..\data\wave_series_goff.csv"; // GW/m
        // max_space = 60000.0; // m
        max_unit = 10000.0;
        unit_rated_power = 0.0059; // GW
        unit_width = 260.0; // m
        space_between = 10.0; // m, to check
        M = 10000;
    #VARIABLES
        internal integer: num_units;
        internal: length; // m
        internal: init_electricity[T];
        internal: up_bound;
        external: electricity[T]; // GW
        internal binary: z_t[T];
    #CONSTRAINTS
        init_electricity[t] == wave_energy_density[t] * num_units * unit_width;
        up_bound == num_units * unit_rated_power;
        init_electricity[t]-up_bound <= M*z_t[t];
        up_bound-init_electricity[t] <= M*(1-z_t[t]);
        electricity[t] <= up_bound;         
        electricity[t] <= init_electricity[t];
        electricity[t] >= init_electricity[t] - M * z_t[t];
        electricity[t] >= up_bound - M * (1 - z_t[t]);
        length == num_units * (unit_width + space_between);
        electricity[t] >= 0;
        num_units <= max_unit;
        num_units >= 0; 
    #OBJECTIVES
        min: global.number_years_horizon * (annualised_capex + fom) * (unit_rated_power * num_units);
        min: vom * electricity[t];

